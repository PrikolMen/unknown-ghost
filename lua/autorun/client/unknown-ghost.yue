addonName = "Unknown Ghost"

import IsValid, GetPos, SetPos, GetAngles, SetAngles, FrameAdvance, GetSequence, SetSequence, SetPoseParameter, InvalidateBoneCache, DrawModel, LookupAttachment, GetAttachment, LookupBone, GetBonePosition, GetNoDraw, SetNoDraw, GetCycle, SetCycle from FindMetaTable( "Entity" )
import DistToSqr, Normalize, Dot, Angle from FindMetaTable( "Vector" )
import random, Clamp, NormalizeAngle, Remap from math
import Forward from FindMetaTable( "Angle" )
import CreateClientside from ents
import Exists from file

FrameTime = FrameTime
isstring = isstring
isnumber = isnumber
isvector = isvector
isangle = isangle
CurTime = CurTime
EyePos = EyePos
tobool = tobool
pairs = pairs
Lerp = Lerp

developer = cvars.Number( "developer" ) > 2
cvars.AddChangeCallback( "developer", ( _, __, value ) ->
    developer = tonumber( value ) > 2
addonName )

ghosts = _G[ addonName ]
unless ghosts
    ghosts = {}
    _G[ addonName ] = ghosts

ghostCount = #ghosts

modelsCache = setmetatable( {}, {
    __index: ( modelPath ) =>
        util.PrecacheModel( modelPath )
        rawset( @, modelPath, modelPath )
        return modelPath
} )

defaultModel = modelsCache[ "models/player/kleiner.mdl" ]

scripted_ents.Register( {
    AutomaticFrameAdvance: true
    WantsTranslucency: true
    Type: "anim"

    Initialize: =>
        @SetModel( defaultModel )
        @DrawShadow( true )
        @SetIK( true )
        return

    Think: =>
        data = @data
        unless data and data.visible
            unless GetNoDraw( @ )
                SetNoDraw( @, true )

            return

        if GetNoDraw( @ )
            SetNoDraw( @, false )

        FrameAdvance( @ )

        if GetPos( @ ) ~= data.origin
            SetPos( @, data.origin )

        if GetAngles( @ ) ~= data.angles
            SetAngles( @, data.angles )

        if data.act
            id = @SelectWeightedSequence( data.act )
            if id >= 0
                data.sequence = id
            data.act = nil

        sequence = data.sequence
        unless isnumber( sequence )
            if isstring( sequence )
                id = @LookupSequence( sequence )
                if id >= 0
                    sequence = id

            unless sequence
                id = @SelectWeightedSequence( ACT_HL2MP_IDLE )
                sequence = ( id >= 0 ) and id or "idle"

            data.sequence = sequence

        if sequence == "idle" or GetSequence( @ ) ~= sequence
            SetSequence( @, sequence )

        if data.cycle_end and GetCycle( @ ) > data.cycle_end
            SetCycle( @, data.cycle_start or data.cycle_end )

        if data.spectate
            SetPoseParameter( @, "head_pitch", data.head_pitch )
            SetPoseParameter( @, "head_yaw", data.head_yaw )
            InvalidateBoneCache( @ )

        return

    DrawTranslucent: DrawModel
    Draw: DrawModel

    SetupModel: ( data ) =>
        if Exists( data.modelpath, "GAME" )
            @SetModel( modelsCache[ data.modelpath ] )
            @SetBodyGroups( data.bodygroups )
            @SetModelScale( data.scale )
            @SetColor( data.color )
            @SetSkin( data.skin )
            @SetupBones!

            data.head_pitch, data.head_pitch_min, data.head_pitch_max = @GetPoseInfo( "head_pitch" )
            data.head_yaw, data.head_yaw_min, data.head_yaw_max = @GetPoseInfo( "head_yaw" )
            return

    GetPoseInfo: ( name ) =>
        min, max = @GetPoseParameterRange( @LookupPoseParameter( name ) )
        return Remap( @GetPoseParameter( name ), 0, 1, min, max ), min, max

}, "unknown_ghost" )

performNames = ->
    for i = 1, ghostCount
        data = ghosts[ i ]
        unless data and data.enabled and data.name
            continue

        name = data.name
        for j = 1, ghostCount
            if j == i
                continue

            data2 = ghosts[ j ]
            unless data2 and data2.enabled
                continue

            if data2.name == name
                data2.enabled = false

hook.Add "PostCleanupMap", addonName, ->
    for i = 1, ghostCount
        data = ghosts[ i ]
        if data
            if data.chance
                data.enabled = random( 1, 100 ) <= Clamp( data.chance, 0, 100 )
            else
                data.enabled = true

    performNames!
    return

-- Custom model downloading
downloadAddon = nil
do

    downloading = {}

    downloadAddon = ( wsid ) ->
        state = downloading[ wsid ]
        if state and ( state == true or ( CurTime! - state ) > 60 )
            return

        downloading[ wsid ] = true

        steamworks.DownloadUGC wsid, ( filePath ) ->
            unless game.MountGMA( filePath )
                downloading[ wsid ] = CurTime!
                return

            for i = 1, ghostCount
                data = ghosts[ i ]
                unless data and data.wsid == wsid
                    continue

                entity = data.entity
                unless entity and IsValid( entity )
                    continue

                entity\SetupModel( data )

-- Ghost visibility
timer.Create addonName .. "::Perform", 0.25, 0, ->
    if ghostCount == 0
        return

    eyePos = EyePos!

    for i = 1, ghostCount
        data = ghosts[ i ]
        unless data
            continue

        unless data.enabled
            if data.visible
                data.visible = false

            entity = data.entity
            if entity and IsValid( entity )
                entity\Remove!

            continue

        if data.max_distance ~= -1 and DistToSqr( eyePos, data.origin ) > data.max_distance
            if data.visible
                data.visible = false

            continue

        unless Exists( data.modelpath, "GAME" )
            downloadAddon( data.wsid )
            continue

        unless data.visible
            data.visible = true

        entity = data.entity
        unless entity and IsValid( entity )
            entity = CreateClientside( "unknown_ghost" )
            data.entity = entity
            entity\Spawn!

            entity\SetupModel( data )
            entity.data = data

            entity.GetPlayerColor = ->
                return data.player_color

hook.Add "Think", addonName .. "::Spectate", ->
    if ghostCount == 0
        return

    eyePos, fraction = EyePos!, FrameTime! * 2.5

    for i = 1, ghostCount
        data = ghosts[ i ]
        unless data and data.visible and data.spectate
            continue

        entity = data.entity
        unless entity and IsValid( entity )
            continue

        origin = nil

        attachment = LookupAttachment( entity, "eyes" )
        if attachment and attachment > 0
            origin = GetAttachment( entity, attachment ).Pos
        else
            bone = LookupBone( entity, "ValveBiped.Bip01_Head1" )
            if bone and bone >= 0
                origin = GetBonePosition( entity, bone )
            else
                origin = entity\EyePos!

        dir = ( eyePos - origin )
        Normalize( dir )

        if Dot( dir, Forward( data.angles ) ) < -0.25
            data.head_yaw = Lerp( fraction, data.head_yaw, 0 )
            return

        dir = Angle( dir ) - data.angles
        data.head_yaw = Lerp( fraction, data.head_yaw, Clamp( NormalizeAngle( dir[ 2 ] ), data.head_yaw_min, data.head_yaw_max ) )
        data.head_pitch = Lerp( fraction, data.head_pitch, Clamp( NormalizeAngle( dir[ 1 ] ), data.head_pitch_min, data.head_pitch_max ) )

-- Web request
defaultMaxDistance = 4096 ^ 2
vector_origin = vector_origin
angle_zero = angle_zero
parameters = {
    method: "GET"
    failed: ( reason ) ->
        if developer
            ErrorNoHaltWithStack "Request failed: " .. reason
        return

    success: ( code, json ) ->
        if code ~= 200
            if developer
                ErrorNoHaltWithStack "Request failed with code: " .. code
            return

        data = util.JSONToTable( json )
        unless data
            if developer
                ErrorNoHaltWithStack "JSON parse failed"
            return

        unless istable( data.ghosts )
            if developer
                ErrorNoHaltWithStack "Invalid unknown ghost data"
            return

        if developer
            print "Unknown ghost data received successfully."

        groups = data.groups or {}

        for i = 1, ghostCount
            ghostData = ghosts[ i ]
            unless ghostData
                continue

            entity = ghostData.entity
            if entity and IsValid( entity )
                entity\Remove!

            ghosts[ i ] = nil

        ghostCount = 0

        for ghostData in *data.ghosts
            if istable( ghostData.groups )
                for groupName in *ghostData.groups
                    unless isstring( groupName ) and istable( groups[ groupName ] )
                        continue

                    for key, value in pairs( groups[ groupName ] )
                        if ghostData[ key ] == nil
                            ghostData[ key ] = value

            ghostData.groups = nil

            if isstring( ghostData.group )
                tbl = groups[ ghostData.group ]
                if istable( tbl )
                    for key, value in pairs( tbl )
                        if ghostData[ key ] == nil
                            ghostData[ key ] = value

            ghostData.group = nil

            modelPath = ghostData.modelpath
            unless isstring( modelPath )
                if developer
                    ErrorNoHaltWithStack "Invalid unknown ghost modelpath"
                continue

            unless isstring( ghostData.wsid )
                ghostData.wsid = nil

            unless Exists( modelPath, "GAME" ) or ghostData.wsid
                if developer
                    ErrorNoHaltWithStack "Unknown ghost model not found: " .. modelPath

                continue

            unless isvector( ghostData.origin )
                if developer
                    ErrorNoHaltWithStack "Invalid unknown ghost origin"
                continue

            unless isangle( ghostData.angles )
                ghostData.angles = angle_zero

            unless isnumber( ghostData.skin )
                ghostData.skin = 0

            unless isstring( ghostData.bodygroups )
                ghostData.bodygroups = ""

            ghostData.color = isvector( ghostData.color ) and ghostData.color\ToColor! or color_white

            unless isvector( ghostData.player_color )
                ghostData.player_color = vector_origin

            unless isnumber( ghostData.scale )
                ghostData.scale = 1

            maxDistance = ghostData.max_distance
            unless isnumber( maxDistance )
                maxDistance = 0

            if maxDistance == 0
                ghostData.max_distance = defaultMaxDistance
            elseif maxDistance < 0
                ghostData.max_distance = -1
            else
                ghostData.max_distance = maxDistance ^ 2

            ghostData.spectate = tobool( ghostData.spectate )

            unless isnumber( ghostData.act )
                ghostData.act = nil

            unless isstring( ghostData.sequence )
                ghostData.sequence = nil

            unless isnumber( ghostData.cycle_end )
                ghostData.cycle_end = nil

            unless isnumber( ghostData.cycle_start )
                ghostData.cycle_start = nil

            unless isstring( ghostData.name )
                ghostData.name = nil

            if isnumber( ghostData.chance )
                ghostData.enabled = random( 1, 100 ) <= Clamp( ghostData.chance, 0, 100 )
            else
                ghostData.enabled = true
                ghostData.chance = nil

            ghostData.visible = false

            ghostData.head_pitch_min = -60
            ghostData.head_pitch_max = 60
            ghostData.head_pitch = 0

            ghostData.head_yaw_min = -75
            ghostData.head_yaw_max = 75
            ghostData.head_yaw = 0

            ghostCount += 1
            ghosts[ ghostCount ] = ghostData

        performNames!
}

cl_unknown_ghost_source = CreateClientConVar( "cl_unknown_ghost_source", "https://raw.githubusercontent.com/PrikolMen/unknown-ghosts/main/%s.json", true, false )

requestData = ( isCustomURL ) ->
    parameters.url = string.format( isCustomURL and cl_unknown_ghost_source\GetString! or cl_unknown_ghost_source\GetDefault!, game.GetMap! )
    HTTP( parameters )
    return

hook.Add "InitPostEntity", addonName, requestData

concommand.Add "cl_unknown_ghost_reload", ( ply ) ->
    if ply\IsSuperAdmin! or ply\IsListenServerHost!
        requestData( true )
        return

concommand.Add "cl_unknown_ghost_position", ( ply ) ->
    angles = ply\EyeAngles!
    angles\SetUnpacked( 0, math.floor( angles[ 2 ] ), 0 )

    origin = ply\GetPos!
    origin\SetUnpacked( math.floor( origin[ 1 ] ), math.floor( origin[ 2 ] ), math.floor( origin[ 3 ] ) )

    print( util.TableToJSON( {
        modelpath: ply\GetModel!
        spectate: true
        :angles
        :origin
    }, true ) )
