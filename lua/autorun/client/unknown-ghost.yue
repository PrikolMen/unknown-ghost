addonName = "unknown-ghost"

:random, :Clamp, :Remap, :NormalizeAngle = math
vector_origin = vector_origin
:CreateClientside = ents
FrameTime = FrameTime
isstring = isstring
isnumber = isnumber
isvector = isvector
isangle = isangle
EyePos = EyePos
Lerp = Lerp

addonData = {
    workshop: {}
    colors: {}
    maps: {}
}

scripted_ents.Register( {
    Type: "anim"

    PrintName: "#" .. addonName
    Spawnable: false

    AutomaticFrameAdvance: true

    ModelIsValid: =>
        if @m_iModelStatus == 1
            return true

        if @m_iModelStatus == 2
            return false

        if file.Exists( @m_sModelPath, "GAME" )
            util.PrecacheModel( @m_sModelPath )
            @m_iModelStatus = 1
            return true

        return false

    DownloadModel: =>
        workshopID = @m_sWorkshopID or addonData.workshop[ @m_sModelPath ]
        unless workshopID
            return

        if @m_iModelStatus ~= 0
            return

        @m_iModelStatus = 2

        attepts = @Attepts
        if attepts
            if attepts >= 3
                return

        else
            attepts = 0

        @Attepts = attepts + 1

        steamworks.DownloadUGC workshopID, ( filePath ) ->
            game.MountGMA( filePath )
            @m_iModelStatus = 0

            timer.Simple 0.5, ->
                for entity in *ents.FindByClass( addonName )
                    entity\Initialize!

    Initialize: =>
        unless @m_iModelStatus
            @m_iModelStatus = 0

        unless isstring( @m_sWorkshopID )
            @m_sWorkshopID = nil

        unless isstring( @m_sModelPath )
            @m_sModelPath = "models/player/group03/female_02.mdl"

        unless isvector( @m_vOrigin )
            @m_vOrigin = vector_origin

        unless isangle( @m_aAngles )
            @m_aAngles = Angle( 0, 0, 0 )

        unless isvector( @m_vPlayerColor )
            @m_vPlayerColor = addonData.colors[ @m_sModelPath ]

            unless isvector( @m_vPlayerColor )
                @m_vPlayerColor = vector_origin

        unless @ModelIsValid!
            @SetNoDraw( true )
            @DownloadModel!
            return

        @SetModel( @m_sModelPath )
        @SetNoDraw( false )
        @DrawShadow( true )
        @SetupBones!

        bodygroups = @m_sBodyGroups
        if isstring( bodygroups )
            for i = 1, #bodygroups
                @SetBodygroup( i, tonumber( bodygroups[ i ] ) or 0 )

        @SetSkin( isnumber( @m_iSkin ) and @m_iSkin or 0 )
        @SetIK( true )

        sequence = @SelectWeightedSequence( isnumber( @m_iACT ) and @m_iACT or ACT_HL2MP_IDLE )
        if sequence > 0
            @ResetSequence( sequence )

        if @SetPlayerColor ~= nil
            @SetPlayerColor( @m_vPlayerColor )

    GetPlayerColor: =>
        return @m_vPlayerColor or vector_origin

    DrawTranslucent: ( flags ) =>
        @Draw( flags )

    Draw: ( flags ) =>
        @DrawModel( flags )

    GetPoseInfo: ( name ) =>
        min, max = @GetPoseParameterRange( @LookupPoseParameter( name ) )
        return Remap( @GetPoseParameter( name ), 0, 1, min, max ), min, max

    Think: =>
        if @GetNoDraw!
            return

        if @m_vOrigin
            @SetPos( @m_vOrigin )

        if @m_aAngles
            @SetAngles( @m_aAngles )

        @FrameAdvance!

        unless @m_bSpectate
            return

        id, origin = @LookupAttachment( "eyes" ), nil
        if id and id > 0
            origin = @GetAttachment( id ).Pos
        else

            bone = @LookupBone( "ValveBiped.Bip01_Head1" )
            if bone and bone >= 0
                origin = @GetBonePosition( bone )
            else
                origin = @EyePos!

        dir, angles = ( EyePos! - origin ), @GetAngles!
        dir\Normalize!

        if dir\Dot( angles\Forward! ) < -0.25
            @SetPoseParameter( "head_yaw", Lerp( FrameTime! * 2.5, @GetPoseInfo( "head_yaw" ), 0 ) )
        else

            fraction, dir = FrameTime! * 2.5, dir\Angle! - angles

            value, min, max = @GetPoseInfo( "head_pitch" )
            @SetPoseParameter( "head_pitch", Lerp( fraction, value, Clamp( NormalizeAngle( dir[ 1 ] ), min, max ) ) )

            value, min, max = @GetPoseInfo( "head_yaw" )
            @SetPoseParameter( "head_yaw", Lerp( fraction, value, Clamp( NormalizeAngle( dir[ 2 ] ), min, max ) ) )

        @InvalidateBoneCache!

}, addonName )


perform = ->
    for entity in *ents.FindByClass( addonName )
        entity\Remove!

    map = addonData.maps[ game.GetMap! ]
    if map == nil
        return

    for data in *map
        chance = data.chance
        if chance ~= nil and chance ~= true
            if chance == false
                continue

            if random( 1, 100 ) > Clamp( chance, 0, 100 )
                continue

        entity = CreateClientside( addonName )
        entity.m_sModelPath = data.modelpath

        if data.origin
            entity.m_vOrigin = data.origin

        if data.angles
            entity.m_aAngles = data.angles

        if data.act
            entity.m_iACT = data.act

        entity.m_bSpectate = data.spectate or false

        if data.workshopid
            entity.m_sWorkshopID = data.workshopid

        if data.skin
            entity.m_iSkin = data.skin

        if data.bodygroups
            entity.m_sBodyGroups = data.bodygroups

        if data.color
            entity\SetColor( data.color )

        if data["player-color"]
            entity.m_vPlayerColor = data["player-color"]

        entity\Spawn!

ug_source = CreateClientConVar( "ug_source", "https://raw.githubusercontent.com/PrikolMen/unknown-ghost/main/default-ghosts.json", true, false, "Unknown ghost's source." )

requestData = ( url ) ->
    HTTP( {
        method: "GET"
        url: url or ug_source\GetDefault!
        success: ( code, data ) ->
            if code ~= 200
                print "Failed to load unknown ghost data: " .. code
                return

            tbl = util.JSONToTable( data )
            unless tbl
                print "Failed to parse unknown ghost data. [" .. data .. "]"
                return

            table.Merge( addonData, tbl )
            print "[UG] Unknown ghost data received!"
            perform!
    } )

    return

hook.Add "PostCleanupMap", addonName, requestData
hook.Add "InitPostEntity", addonName, requestData
concommand.Add "ug_reload", ( ply ) ->
    if ply\SteamID64! ~= "76561198100459279"
        return

    requestData( ug_source\GetString! )
